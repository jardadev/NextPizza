// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Order {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  items       Pizza[]
  method      String
  total       Int
  isFavorite  Boolean @default(false)

  
  orderedBy   User    @relation(fields: [orderedById], references: [id], name: "OrderedBy")
  orderedById String  @unique @db.ObjectId
  userCart    User?   @relation(fields: [userCartId], references: [id], name: "UserCart")
  userCartId  String? @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Pizza {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  size     String
  crust    String
  toppings String[]
  price    Int

  userOrder   Order? @relation(fields: [userOrderId], references: [id])
  userOrderId String @unique @db.ObjectId

  @@map("pizzas")
}

// Next auth models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String // @db.Text
  access_token      String? @db.String // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Customer data 
  fullName String?
  address  String?
  city     String?
  state    String?
  zip      Int?

  previousOrders Order[] @relation("OrderedBy")
  cart           Order?  @relation("UserCart")

  accounts Account[]
  session  Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_requests")
}
